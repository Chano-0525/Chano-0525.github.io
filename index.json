[{"categories":null,"content":"This is my first time to commit my article! Studying numpy and pandas recently ","date":"2021-11-08","objectID":"/first_post/:0:0","tags":null,"title":"First_post","uri":"/first_post/"},{"categories":null,"content":"本人介绍 悉尼大学Master of Information Technology在读 兴趣方向：数据分析，深度学习 ","date":"2021-11-08","objectID":"/about/:0:1","tags":null,"title":"About me","uri":"/about/"},{"categories":null,"content":"教育经历 2022/02 - now : 悉尼大学 信息技术/ The University of Sydney Master of Information Technology 2017/09 - 2021/06: 扬州大学 软件工程专业 / YangZhou University Software Engineer ","date":"2021-11-08","objectID":"/about/:0:2","tags":null,"title":"About me","uri":"/about/"},{"categories":null,"content":"获奖经历 ","date":"2021-11-08","objectID":"/about/:0:3","tags":null,"title":"About me","uri":"/about/"},{"categories":null,"content":"项目经历 ","date":"2021-11-08","objectID":"/about/:0:4","tags":null,"title":"About me","uri":"/about/"},{"categories":null,"content":"任职经历 2019/07 - 2020/07: 扬州大学信息工程学院 学生科学技术协会 副主席 2018/07 - 2019/07: 扬州大学信息工程学院 学生科学技术协会 科技活动中心 部长 ","date":"2021-11-08","objectID":"/about/:0:5","tags":null,"title":"About me","uri":"/about/"},{"categories":null,"content":"联系方式 QQ: 932931503 E-Mail : chaowong0525@outlook.com|| 932931503@qq.com ","date":"2021-11-08","objectID":"/about/:0:6","tags":null,"title":"About me","uri":"/about/"},{"categories":null,"content":"友链 诸晨冬的博客 ","date":"2021-11-08","objectID":"/about/:0:7","tags":null,"title":"About me","uri":"/about/"},{"categories":null,"content":"关于本博客 LoveIt 是一个由 Dillon 开发的简洁、优雅且高效的 Hugo 博客主题。 它的原型基于 LeaveIt 主题 和 KeepIt 主题。 更多详情请出门右转该主题的github. ","date":"2021-11-08","objectID":"/about/:0:8","tags":null,"title":"About me","uri":"/about/"},{"categories":["学习"],"content":"关于Python可视化的笔记","date":"2021-11-08","objectID":"/python%E5%8F%AF%E8%A7%86%E5%8C%96/","tags":["Python","matplotlib"],"title":"Python可视化","uri":"/python%E5%8F%AF%E8%A7%86%E5%8C%96/"},{"categories":["学习"],"content":"此笔记记载通过使用python matplotlib等数据可视化工具的方法。 ","date":"2021-11-08","objectID":"/python%E5%8F%AF%E8%A7%86%E5%8C%96/:0:0","tags":["Python","matplotlib"],"title":"Python可视化","uri":"/python%E5%8F%AF%E8%A7%86%E5%8C%96/"},{"categories":["学习"],"content":"Python matplotlib marplotlib的总体概念 最大的概念是figure，每个figure可以有多个axes，每个axes有两个或者三个（3D）axis，可以通过以下代码进行创建： fig = plt.figure() # 创建一个figure fig, ax = plt.subplots() # 创建一个figure并返回figure和一个Axes fig, axs = plt.subplots(2,2) # 创建一个带有2行2列（共4个）Axes的figure axs[0,0].plot(x,y) axs[1,1].scatter(x,y) ...... subplots()返回Axes对象的数组，每个axes都是一个单独的子图，可以通过axes.Axes.set_xlim()和axes.Axes.set_ylim()方法控制x轴和y轴的长度，同时可以通过set_xlabel()和set_ylabel()来设置两个轴的标题，通过legend()方法显示该axes的图注。通过set_title()设置axes的大标题。注意，plot()函数的输入必须是numpy的array类型。 建议通过以下的格式来抽象出一个绘图函数： def my_plotter(ax, data1, data2, param_dict): \"\"\" A helper function to make a graph Parameters ----------- ax : Axes The axes to draw to data1 : array The x data data2 : array The y data param_dict : dict Dictionary of kwargs to pass to ax.plot Returns ------ out : list list of artists added \"\"\" out = ax.plot(data1,data2,**param_dict) return out plot函数的使用 一般是： plot(x,y,...) 后面的参数有以下： 参数名 描述 color color颜色 linestyle 线形，{'-','–','-.',':'} linewidth 线的宽度,float marker 点的标记，具体见下 可以通过format string控制，format string的格式为 fmt = '[marker][line][color]' ... fmt = 'o-r' plot(x,y,fmt) 点的标记有以下格式 character description ‘.’ point marker ‘,’ pixel marker ‘o’ circle marker ‘v’ triangle_down marker ‘^’ triangle_up marker ‘\u003c’ triangle_left marker ‘\u003e’ triangle_right marker ‘1’ tri_down marker ‘2’ tri_up marker ‘3’ tri_left marker ‘4’ tri_right marker ’s' square marker ‘p’ pentagon marker ‘*’ star marker ‘h’ hexagon1 marker ‘H’ hexagon2 marker ‘+’ plus marker ‘x’ x marker ‘D’ diamond marker ’d' thin_diamond marker ‘|’ vline marker ‘-’ hline marker 颜色的分类有以下： character color ‘b’ blue ‘g’ green ‘r’ red ‘c’ cyan ’m' magenta ‘y’ yellow ‘k’ black ‘w’ white 如果format string 只设定了 颜色，可以使用16进制串如‘#008000’. 分层设色地形图/等高线图相关 需要用到的函数 contour([X,Y,]Z,[levels], **kwargs) # 只能绘制线 contourf([X,Y,]Z,[levels], **kwargs) # 只能绘制色块 X,Y都是坐标，Z是高度，levels是高度的分级（必须是递增）重要参数有： colors : 指定每个level的颜色，如果是contour则指定了线的颜色，如果是contourf则指定了色块的颜色 extend : 取值有{‘neither’, ‘both’, ‘min’, ‘max’}, 这个指定了超出等级范围的色块的显示，如果设置neither，超出范围都是空白，如果选min则对低于最低level的有效，如果选max则对高于最高level的有效，选both对所有范围都有效，一般选both。可以通过cmap的set_over()和set_under()来设定超过上限和下限的颜色，更换颜色以后需要使用cs.changed()来调整（注：cs是contour或者contourf的返回，是QuadContourSet类型，大概是代表了所有等高线的一个集合set） linewidths: 线的宽度，只适用于contour linestyles:线的类型，可选的值有{None, ‘solid’, ‘dashed’, ‘dashdot’, ‘dotted’}，只适用于contour extend : 一个四元组如（-3,4,-4,3）,指定了图片的左上角和右下角，即划分了范围 一个简单的例子如下： import numpy as np import matplotlib.pyplot as plt x = np.arange(1,10) y = x.reshape(-1,1) h = x * y cs = plt.contourf(h, levels=[10,30,50], colors=['#808080','#A0A0A0','#C0C0C0'],extend='both') plt.show() 在等高线上绘制值 通过 clabel(CS, inline=True, fontsize=10) 绘制值，其中inline指定这个值是否被登高线遮住，一般是选择True，让值遮住线，fontsize则是选择值的字体大小。 例子如下： import numpy as np import matplotlib.pyplot as plt delta = 0.025 x = np.arange(-3.0, 3.0, delta) y = np.arange(-2.0, 2.0, delta) X, Y = np.meshgrid(x,y) Z1 = np.exp(-X**2 - Y**2) Z2 = np.exp(-(X-1)**2 - (Y-1)**2) Z = (Z1 - Z2) * 2 fig, ax = plt.subplots() CS = ax.contour(X,Y,Z) ax.clabel(CS, inline=True, fontsize=10) ax.set_title('Simplest default with labels') plt.show() 绘制直方图 使用 hist() 进行绘制，主要的参数有 参数 值 x 输入，可以是一维或者多维数组（多维数组不要求等长） bins 区间，一个一维数组如[1,2,3,4]，代表了1到2，2到3，3到4这三个区间，将会统计每个区间的个数并显示 histtype 绘制的柱的类型，可选的值有{‘bar’,‘barstacked’,‘step’,‘stepfilled’}，step指只画线 align 可选的值有{‘left’, ‘mid’, ‘right’}，指柱子是在一个bin中的位置 orientation 可选的值有{‘vertical’, ‘horizontal’}，指定了图的方向 stacked 多维数据的显示方式，正常是放在柱子的旁边，如果是True，将堆叠在上方 rwidth 柱子宽度，感觉是按（0，1）的百分比来的 例子如下： import numpy as np import matplotlib.pyplot as plt x = [[1.2,1.2,2.2,-2.2,-1.2],[2.2,-0.2]] # 一个二维的数据 fig, axs = plt.subplots(2,2) axs[0,0].hist(x,bins=[-3,-2,-1,0,1,2,3], rwidth=0.5) axs[0,0].set_title('stacked=False') axs[0,1].hist(x,bins=[-3,-2,-1,0,1,2,3], rwidth=0.5, stacked=True) axs[0,1].set_title('stacked=True') axs[1,0].hist(x,bins=[-3,-2,-1,0,1,2,3], rwidth=0.5, orientation='horizontal') axs[1,0].set_title('orientation=\\'horizontal\\'') axs[1,1].hist(x,bins=[-3,-2,-1,0,1,2,3], rwidth=0.5, histtype='step') axs[1,1].set_title('hi","date":"2021-11-08","objectID":"/python%E5%8F%AF%E8%A7%86%E5%8C%96/:0:1","tags":["Python","matplotlib"],"title":"Python可视化","uri":"/python%E5%8F%AF%E8%A7%86%E5%8C%96/"},{"categories":["学习"],"content":"参考文献 Matplotlib Usage Guide ","date":"2021-11-08","objectID":"/python%E5%8F%AF%E8%A7%86%E5%8C%96/:0:2","tags":["Python","matplotlib"],"title":"Python可视化","uri":"/python%E5%8F%AF%E8%A7%86%E5%8C%96/"}]